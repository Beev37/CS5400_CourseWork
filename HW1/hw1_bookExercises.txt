Chpt. 1: (1.1-1.5)

Exercise  1.1 Which of the following sequences of characters are atoms, which are variables, and which are neither?

    vINCENT                 - atom
    Footmassage             - variable 
    variable23              - atom
    Variable2000            - variable
    big_kahuna_burger       - atom
    ’big  kahuna  burger’   - atom
    big  kahuna  burger     - neither
    ’Jules’                 - atom
    _Jules                  - variable
    ’_Jules’                - atom

Exercise  1.2 Which of the following sequences of characters are atoms, which are variables, which are complex terms, and which are not terms at all? 
Give the functor and arity of each complex term.

    loves(Vincent,mia)                  - complex term [functor=loves; arity=2]
    ’loves(Vincent,mia)’                - atom
    Butch(boxer)                        - neither (because the functor is not a valid atom)
    boxer(Butch)                        - complex term [functor=boxer; arity=1]
    and(big(burger),kahuna(burger))     - complex term [functor=and; arity=2]
    and(big(X),kahuna(X))               - complex term [functor=and; arity=2]
    _and(big(X),kahuna(X))              - neither (because the functor is not a valid atom)
    (Butch  kills  Vincent)             - neither (because of the lack of a functor)
    kills(Butch  Vincent)               - neither (because the lack of a comma separating the arguments)
    kills(Butch,Vincent                 - neither (because of the typo [forgetting the closing parentheses])

Exercise  1.3 How many facts, rules, clauses, and predicates are there in the following knowledge base? 
What are the heads of the rules, and what are the goals they contain?

   woman(vincent).                          - fact 
   woman(mia).                              - fact
   man(jules).                              - fact
   person(X):-  man(X);  woman(X).          - rule
   loves(X,Y):-  father(X,Y).               - rule
   father(Y,Z):-  man(Y),  son(Z,Y).        - rule
   father(Y,Z):-  man(Y),  daughter(Z,Y).   - rule

   - In this knowledge base, there are:
        - Facts:        3x
        - Rules:        4x
        - Clauses:      7x
        - Predicates:   7x (woman, man, person, loves, father, son, daughter)
        - Rule Heads:   person(x), loves(X,Y), father(Y,Z)
        - Rule Goals:   man(X), woman(X), father(X,Y), son(Z,Y), daughter(Z,Y)

Exercise  1.4 Represent the following in Prolog:

    Butch is a killer.                                      - killer(butch).
    Mia and Marsellus are married.                          - married(mia, marsellus).
    Zed is dead.                                            - dead(zed).
    Marsellus kills everyone who gives Mia a footmassage.   - kills(marsellus,X) :- footMassage(X,mia).
    Mia loves everyone who is a good dancer.                - loves(mia,X) :- goodDancer(X).
    Jules eats anything that is nutritious or tasty.        - eats(jules, food) :- nutritious(food); tasty(food).

Exercise  1.5 Suppose we are working with the following knowledge base:

   wizard(ron).
   hasWand(harry).
   quidditchPlayer(harry).
   wizard(X):-  hasBroom(X),  hasWand(X).
   hasBroom(X):-  quidditchPlayer(X).

How does Prolog respond to the following queries?

    wizard(ron).        - True
    witch(ron).         - False
    wizard(hermione).   - False
    witch(hermione).    - False (Error message - unknown procedure)
    wizard(harry).      - True
    wizard(Y).          - (Y=ron; Y=harry)
    witch(Y).           - False (Error message - unknown procedure)


_______________________________________________________________________________


Chpt. 2: (2.1 & 2.2)

Exercise  2.1 Which of the following pairs of terms unify? 
                Where relevant, give the variable instantiations that lead to successful unification.

    bread  =  bread                                 - unify
    ’Bread’  =  bread                               - doesn't unify
    ’bread’  =  bread                               - unify
    Bread  =  bread                                 - doesn't unify
    bread  =  sausage                               - doesn't unify
    food(bread)  =  bread                           - doesn't unify
    food(bread)  =  X                               - unify // X = food(bread)
    food(X)  =  food(bread)                         - unify // X = bread
    food(bread,X)  =  food(Y,sausage)               - unify // X = sausage, Y = bread
    food(bread,X,beer)  =  food(Y,sausage,X)        - doesn't unify
    food(bread,X,beer)  =  food(Y,kahuna_burger)    - doesn't unify
    food(X)  =  X                                   - doesn't unify
    meal(food(bread),drink(beer))  =  meal(X,Y)     - unify // X = food(bread), Y = drink(beer)
    meal(food(bread),X)  =  meal(X,drink(beer))     - doesn't unify

Exercise  2.2 We are working with the following knowledge base:
   house_elf(dobby).
   witch(hermione).
   witch(’McGonagall’).
   witch(rita_skeeter).
   magic(X):-  house_elf(X).
   magic(X):-  wizard(X).
   magic(X):-  witch(X).

Which of the following queries are satisfied? Where relevant, give all the variable instantiations that lead to success.

    ?-  magic(house_elf).
    ?-  wizard(harry).
    ?-  magic(wizard).
    ?-  magic(’McGonagall’).
    ?-  magic(Hermione).

Draw the search tree for the query magic(Hermione) .
